{"version":3,"file":"controlRendering.mjs","sources":["../../../src/controls/controlRendering.ts"],"sourcesContent":["import { FILL, STROKE, twoMathPi } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\nimport { ROTATE } from '../constants';\n\nexport type ControlRenderingStyleOverride = Partial<\n  Pick<\n    InteractiveFabricObject,\n    | 'cornerStyle'\n    | 'cornerSize'\n    | 'cornerColor'\n    | 'cornerStrokeColor'\n    | 'cornerDashArray'\n    | 'transparentCorners' \n    | 'cornerSecondColor'\n  >\n>;\n\nexport type ControlRenderer<\n  O extends InteractiveFabricObject = InteractiveFabricObject,\n> = (\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: O,\n) => void;\n\nexport function renderMultiPointControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject\n) {\n  if (this.actionName == ROTATE) {\n    renderPointControl.apply(this, [\n      ctx,\n      left,\n      top,\n      styleOverride,\n      fabricObject,\n    ]);\n  } else {\n    renderRoundedPointControl.apply(this, [\n      ctx,\n      left,\n      top,\n      styleOverride,\n      fabricObject,\n    ]);\n  }\n}\n\nexport function renderPointControl(\n    this: Control,\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride,\n    fabricObject: InteractiveFabricObject\n  ) {\n    styleOverride = styleOverride || {};\n    const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize;\n    const ySize =\n      this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize;\n\n    let myLeft = left;\n    let myTop = top;\n    let size = undefined;\n\n    ctx.save();\n    ctx.fillStyle =\n      styleOverride.cornerSecondColor || fabricObject.cornerSecondColor;\n    ctx.strokeStyle =\n      styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || \"\";\n\n    if (xSize > ySize) {\n      size = xSize;\n      ctx.scale(1.0, ySize / xSize);\n      myTop = (top * xSize) / ySize;\n    } else if (ySize > xSize) {\n      size = ySize;\n      ctx.scale(xSize / ySize, 1.0);\n      myLeft = (left * ySize) / xSize;\n    } else {\n      size = xSize;\n    }\n\n    ctx.beginPath();\n    ctx.arc(myLeft, myTop, size / 1.5, 0, Math.PI * 2, false);\n    ctx.fill();\n\n    ctx.closePath();\n\n    ctx.arc(myLeft, myTop, size / 1.5, 0, Math.PI * 2, false);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  export function renderRoundedPointControl(\n    this: Control,\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride,\n    fabricObject: InteractiveFabricObject\n  ) {\n    styleOverride = styleOverride || {};\n    const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize;\n    const ySize =\n      this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize;\n\n    let myLeft = left;\n    let myTop = top;\n    let size = undefined;\n\n    ctx.save();\n    ctx.fillStyle =\n      styleOverride.cornerSecondColor || fabricObject.cornerSecondColor;\n    ctx.strokeStyle =\n      styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || \"\";\n\n    if (xSize > ySize) {\n      size = xSize;\n      ctx.scale(1.0, ySize / xSize);\n      myTop = (top * xSize) / ySize;\n    } else if (ySize > xSize) {\n      size = ySize;\n      ctx.scale(xSize / ySize, 1.0);\n      myLeft = (left * ySize) / xSize;\n    } else {\n      size = xSize;\n    }\n\n    ctx.beginPath();\n\n    ctx.fillStyle =\n      styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || \"\";\n\n    ctx.arc(myLeft, myTop, size / 1, 0, Math.PI * 2, false);\n    ctx.fill();\n\n    ctx.closePath();\n\n    ctx.beginPath();\n\n    ctx.fillStyle =\n      styleOverride.cornerSecondColor || fabricObject.cornerSecondColor || \"\";\n\n    ctx.arc(myLeft, myTop, size / 2, 0, Math.PI * 2, false);\n    ctx.fill();\n\n    ctx.closePath();\n    ctx.beginPath();\n\n    ctx.strokeStyle =\n      styleOverride.cornerSecondColor || fabricObject.cornerSecondColor || \"\";\n\n    ctx.arc(myLeft, myTop, size / 1.2, 0, Math.PI * 2, false);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n/**\n * Render a round control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderCircleControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor);\n  let myLeft = left,\n    myTop = top,\n    size;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  // TODO: use proper ellipse code.\n  if (xSize > ySize) {\n    size = xSize;\n    ctx.scale(1.0, ySize / xSize);\n    myTop = (top * xSize) / ySize;\n  } else if (ySize > xSize) {\n    size = ySize;\n    ctx.scale(xSize / ySize, 1.0);\n    myLeft = (left * ySize) / xSize;\n  } else {\n    size = xSize;\n  }\n  ctx.beginPath();\n  ctx.arc(myLeft, myTop, size / 2, 0, twoMathPi, false);\n  ctx[methodName]();\n  if (stroke) {\n    ctx.stroke();\n  }\n  ctx.restore();\n} \n\n/**\n * Render a square control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderSquareControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\n    xSizeBy2 = xSize / 2,\n    ySizeBy2 = ySize / 2;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  ctx.translate(left, top);\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle();\n  ctx.rotate(degreesToRadians(angle));\n  // this does not work, and fixed with ( && ) does not make sense.\n  // to have real transparent corners we need the controls on upperCanvas\n  // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  ctx[`${methodName}Rect`](-xSizeBy2, -ySizeBy2, xSize, ySize);\n  if (stroke) {\n    ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  }\n  ctx.restore();\n}\n"],"names":["renderMultiPointControl","ctx","left","top","styleOverride","fabricObject","actionName","ROTATE","renderPointControl","apply","renderRoundedPointControl","xSize","sizeX","cornerSize","ySize","sizeY","myLeft","myTop","size","undefined","save","fillStyle","cornerSecondColor","strokeStyle","cornerStrokeColor","scale","beginPath","arc","Math","PI","fill","closePath","stroke","restore","renderCircleControl","transparentCorners","methodName","STROKE","FILL","cornerColor","twoMathPi","renderSquareControl","xSizeBy2","ySizeBy2","translate","angle","getTotalAngle","rotate","degreesToRadians","concat","strokeRect"],"mappings":"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"}