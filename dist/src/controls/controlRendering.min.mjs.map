{"version":3,"file":"controlRendering.min.mjs","sources":["../../../src/controls/controlRendering.ts"],"sourcesContent":["import { FILL, STROKE, twoMathPi } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\nimport { ROTATE } from '../constants';\n\nexport type ControlRenderingStyleOverride = Partial<\n  Pick<\n    InteractiveFabricObject,\n    | 'cornerStyle'\n    | 'cornerSize'\n    | 'cornerColor'\n    | 'cornerStrokeColor'\n    | 'cornerDashArray'\n    | 'transparentCorners' \n    | 'cornerSecondColor'\n  >\n>;\n\nexport type ControlRenderer<\n  O extends InteractiveFabricObject = InteractiveFabricObject,\n> = (\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: O,\n) => void;\n\nexport function renderMultiPointControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject\n) {\n  if (this.actionName == ROTATE) {\n    renderPointControl.apply(this, [\n      ctx,\n      left,\n      top,\n      styleOverride,\n      fabricObject,\n    ]);\n  } else {\n    renderRoundedPointControl.apply(this, [\n      ctx,\n      left,\n      top,\n      styleOverride,\n      fabricObject,\n    ]);\n  }\n}\n\nexport function renderPointControl(\n    this: Control,\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride,\n    fabricObject: InteractiveFabricObject\n  ) {\n    styleOverride = styleOverride || {};\n    const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize;\n    const ySize =\n      this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize;\n\n    let myLeft = left;\n    let myTop = top;\n    let size = undefined;\n\n    ctx.save();\n    ctx.fillStyle =\n      styleOverride.cornerSecondColor || fabricObject.cornerSecondColor;\n    ctx.strokeStyle =\n      styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || \"\";\n\n    if (xSize > ySize) {\n      size = xSize;\n      ctx.scale(1.0, ySize / xSize);\n      myTop = (top * xSize) / ySize;\n    } else if (ySize > xSize) {\n      size = ySize;\n      ctx.scale(xSize / ySize, 1.0);\n      myLeft = (left * ySize) / xSize;\n    } else {\n      size = xSize;\n    }\n\n    ctx.beginPath();\n    ctx.arc(myLeft, myTop, size / 1.5, 0, Math.PI * 2, false);\n    ctx.fill();\n\n    ctx.closePath();\n\n    ctx.arc(myLeft, myTop, size / 1.5, 0, Math.PI * 2, false);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  export function renderRoundedPointControl(\n    this: Control,\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride,\n    fabricObject: InteractiveFabricObject\n  ) {\n    styleOverride = styleOverride || {};\n    const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize;\n    const ySize =\n      this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize;\n\n    let myLeft = left;\n    let myTop = top;\n    let size = undefined;\n\n    ctx.save();\n    ctx.fillStyle =\n      styleOverride.cornerSecondColor || fabricObject.cornerSecondColor;\n    ctx.strokeStyle =\n      styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || \"\";\n\n    if (xSize > ySize) {\n      size = xSize;\n      ctx.scale(1.0, ySize / xSize);\n      myTop = (top * xSize) / ySize;\n    } else if (ySize > xSize) {\n      size = ySize;\n      ctx.scale(xSize / ySize, 1.0);\n      myLeft = (left * ySize) / xSize;\n    } else {\n      size = xSize;\n    }\n\n    ctx.beginPath();\n\n    ctx.fillStyle =\n      styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || \"\";\n\n    ctx.arc(myLeft, myTop, size / 1, 0, Math.PI * 2, false);\n    ctx.fill();\n\n    ctx.closePath();\n\n    ctx.beginPath();\n\n    ctx.fillStyle =\n      styleOverride.cornerSecondColor || fabricObject.cornerSecondColor || \"\";\n\n    ctx.arc(myLeft, myTop, size / 2, 0, Math.PI * 2, false);\n    ctx.fill();\n\n    ctx.closePath();\n    ctx.beginPath();\n\n    ctx.strokeStyle =\n      styleOverride.cornerSecondColor || fabricObject.cornerSecondColor || \"\";\n\n    ctx.arc(myLeft, myTop, size / 1.2, 0, Math.PI * 2, false);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n/**\n * Render a round control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderCircleControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor);\n  let myLeft = left,\n    myTop = top,\n    size;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  // TODO: use proper ellipse code.\n  if (xSize > ySize) {\n    size = xSize;\n    ctx.scale(1.0, ySize / xSize);\n    myTop = (top * xSize) / ySize;\n  } else if (ySize > xSize) {\n    size = ySize;\n    ctx.scale(xSize / ySize, 1.0);\n    myLeft = (left * ySize) / xSize;\n  } else {\n    size = xSize;\n  }\n  ctx.beginPath();\n  ctx.arc(myLeft, myTop, size / 2, 0, twoMathPi, false);\n  ctx[methodName]();\n  if (stroke) {\n    ctx.stroke();\n  }\n  ctx.restore();\n} \n\n/**\n * Render a square control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderSquareControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\n    xSizeBy2 = xSize / 2,\n    ySizeBy2 = ySize / 2;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  ctx.translate(left, top);\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle();\n  ctx.rotate(degreesToRadians(angle));\n  // this does not work, and fixed with ( && ) does not make sense.\n  // to have real transparent corners we need the controls on upperCanvas\n  // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  ctx[`${methodName}Rect`](-xSizeBy2, -ySizeBy2, xSize, ySize);\n  if (stroke) {\n    ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  }\n  ctx.restore();\n}\n"],"names":["renderMultiPointControl","ctx","left","top","styleOverride","fabricObject","this","actionName","ROTATE","renderPointControl","apply","renderRoundedPointControl","xSize","sizeX","cornerSize","ySize","sizeY","size","myLeft","myTop","save","fillStyle","cornerSecondColor","strokeStyle","cornerStrokeColor","scale","beginPath","arc","Math","PI","fill","closePath","stroke","restore","renderCircleControl","transparentCorners","methodName","STROKE","FILL","cornerColor","twoMathPi","renderSquareControl","xSizeBy2","ySizeBy2","translate","angle","getTotalAngle","rotate","degreesToRadians","concat","strokeRect"],"mappings":"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"}